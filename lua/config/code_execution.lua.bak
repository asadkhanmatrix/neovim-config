-- Language Support
local group = vim.api.nvim_create_augroup("LanguageSupport", { clear = true })

-- Python support
vim.api.nvim_create_autocmd("FileType", {
    group = group,
    pattern = "python",
    callback = function()
        vim.opt_local.expandtab = true
        vim.opt_local.tabstop = 4
        vim.opt_local.shiftwidth = 4

        -- Python execution
        map("n", "<leader>ds", function()
            local file = vim.fn.expand("%:p")
            vim.cmd("write")
            vim.cmd("vnew | terminal time python3 " .. file)
            vim.cmd("vertical resize 60")
        end, opts)
    end,
})

-- C++ support
vim.api.nvim_create_autocmd("FileType", {
    group = group,
    pattern = "cpp",
    callback = function()
        vim.opt_local.expandtab = true
        vim.opt_local.tabstop = 2
        vim.opt_local.shiftwidth = 2

        local function compile()
            local file = vim.fn.expand("%:p:.")
            local output = vim.fn.expand("%:r")
            local compile_cmd = string.format(
                "vnew | terminal time g++ -std=c++23 -O2 -Wall -Wpedantic -fsanitize=undefined %s -o %s",
                file,
                output
            )
            vim.cmd("write")
            vim.lsp.buf.format()
            vim.cmd(compile_cmd)
            vim.cmd("vertical resize 60")
        end

        local function execute()
            local file = vim.fn.expand("%:p:r")
            vim.cmd("write")
            vim.cmd("vsplit | terminal " .. file)
            vim.cmd("vertical resize 60")
        end

        map("n", "<leader>bs", compile, opts)
        map("n", "<leader>ds", execute, opts)
    end,
})

-- Rust support for individual files
vim.api.nvim_create_autocmd("FileType", {
    group = group,
    pattern = "rust",
    callback = function()
        vim.opt_local.expandtab = true
        vim.opt_local.tabstop = 4
        vim.opt_local.shiftwidth = 4

        local function compile()
            local file = vim.fn.expand("%:p")  -- Get full file path
            local output = vim.fn.expand("%:r")  -- Get base file name (without extension)
            local compile_cmd = string.format(
                "vnew | terminal time rustc %s -o %s",
                file,
                output
            )
            vim.cmd("write")  -- Save the file
            vim.cmd(compile_cmd)  -- Run rustc
            vim.cmd("vertical resize 60")  -- Adjust window size
        end

        local function execute()
            local file = vim.fn.expand("%:p:r")  -- Get base file name (without extension)
            vim.cmd("write")  -- Save the file
            vim.cmd("vsplit | terminal " .. file)  -- Run the compiled file
        end

        -- Mapping commands to keys
        map("n", "<leader>bs", compile, opts)  -- Compile with rustc
        map("n", "<leader>ds", execute, opts)  -- Run the compiled file
    end,
})

-- Zig support for individual files
vim.api.nvim_create_autocmd("FileType", {
    group = group,
    pattern = "zig",
    callback = function()
        vim.opt_local.expandtab = true
        vim.opt_local.tabstop = 4
        vim.opt_local.shiftwidth = 4

        local function compile()
            local file = vim.fn.expand("%:p")  -- Get full file path
            local compile_cmd = string.format(
                "vnew | terminal time zig build-exe %s -O ReleaseSafe",
                file
            )
            vim.cmd("write")  -- Save the file
            vim.cmd(compile_cmd)  -- Compile the file
            vim.cmd("vertical resize 60")  -- Adjust window size
        end

        local function execute()
            local file = vim.fn.expand("%:p:r")  -- Get base file name (without extension)
            vim.cmd("write")  -- Save the file
            vim.cmd("vsplit | terminal " .. file)  -- Run the compiled file
        end

        -- Mapping commands to keys
        map("n", "<leader>bs", compile, opts)  -- Compile with zig
        map("n", "<leader>ds", execute, opts)  -- Run the compiled file
    end,
})

